# goals_habits.py
# –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ —Ü–µ–ª—è–º–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏–≤—ã—á–µ–∫

from typing import Dict, List, Any
from datetime import datetime, timedelta
import json


class GoalsHabitsManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ —Ü–µ–ª—è–º–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.goals_templates = {
            "savings": {
                "name": "–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤",
                "icon": "üí∞",
                "milestones": [10000, 50000, 100000, 500000],
                "tips": [
                    "–ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ 10% –æ—Ç –¥–æ—Ö–æ–¥–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞—Ä–ø–ª–∞—Ç—ã",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ '–ó–∞–ø–ª–∞—Ç–∏ —Å–µ–±–µ –ø–µ—Ä–≤—ã–º'",
                    "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç"
                ]
            },
            "debt_free": {
                "name": "–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –æ—Ç –¥–æ–ª–≥–æ–≤",
                "icon": "üéØ",
                "milestones": [25, 50, 75, 100],  # % –ø–æ–≥–∞—à–µ–Ω–∏—è
                "tips": [
                    "–ú–µ—Ç–æ–¥ '—Å–Ω–µ–∂–Ω–æ–≥–æ –∫–æ–º–∞': –Ω–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª—ã—Ö –¥–æ–ª–≥–æ–≤",
                    "–†–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∏—Å–ª–∞–º—Å–∫–∏–π –ø—Ä–æ–¥—É–∫—Ç —Å–Ω–∏–∂–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É",
                    "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏"
                ]
            },
            "expense_reduction": {
                "name": "–°–Ω–∏–∂–µ–Ω–∏–µ —Ç—Ä–∞—Ç",
                "icon": "üìâ",
                "categories": ["–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è/–•–æ–±–±–∏", "–¢–∞–∫—Å–∏"],
                "tips": [
                    "–ü—Ä–∞–≤–∏–ª–æ 24 —á–∞—Å–æ–≤: –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ —Å—É—Ç–∫–∏",
                    "–í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–∞—Ç - —ç—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ 15-20%",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø '–û–¥–Ω–∞ –ø–æ–∫—É–ø–∫–∞ ‚Äî –æ–¥–Ω–∞ –≤–µ—â—å –ø—Ä–æ–¥–∞–Ω–∞'"
                ]
            },
            "halal_transition": {
                "name": "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ö–∞–ª—è–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
                "icon": "‚ò™Ô∏è",
                "steps": [
                    "–ò–∑—É—á–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏—Å–ª–∞–º—Å–∫–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è",
                    "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –®–∞—Ä–∏–∞—Ç—É",
                    "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å 1-2 –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –∏—Å–ª–∞–º—Å–∫–∏–µ",
                    "–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —ç—Ç–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã"
                ],
                "benefits": [
                    "–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
                    "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–∏—Å—Å–∏–π –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤",
                    "–î—É—à–µ–≤–Ω–æ–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ"
                ]
            },
            "investment": {
                "name": "–ù–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å",
                "icon": "üìà",
                "starting_amounts": [10000, 50000, 100000],
                "islamic_options": [
                    "–î–µ–ø–æ–∑–∏—Ç –ú—É–¥–∞—Ä–∞–±–∞ (—Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)",
                    "–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏)",
                    "–°—É–∫—É–∫ (–∏—Å–ª–∞–º—Å–∫–∏–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏)"
                ]
            }
        }
        
        self.habit_challenges = {
            "coffee_challenge": {
                "name": "7-–¥–Ω–µ–≤–Ω—ã–π –∫–æ—Ñ–µ–π–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂",
                "description": "–í–º–µ—Å—Ç–æ –∫–æ—Ñ–µ –≤ –∫–∞—Ñ–µ - –≥–æ—Ç–æ–≤—å—Ç–µ –¥–æ–º–∞",
                "duration_days": 7,
                "expected_savings": 15000,  # –∑–∞ –Ω–µ–¥–µ–ª—é
                "difficulty": "easy",
                "tips": [
                    "–î–µ–Ω—å 1-2: –ö—É–ø–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—Ñ–µ –¥–æ–º–æ–π (3000 KZT)",
                    "–î–µ–Ω—å 3-4: –ó–∞–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Å–∏–≤—É—é —Ç–µ—Ä–º–æ–∫—Ä—É–∂–∫—É",
                    "–î–µ–Ω—å 5-7: –ü–æ—Ö–≤–∞–ª–∏—Ç–µ —Å–µ–±—è - –≤—ã —Å—ç–∫–æ–Ω–æ–º–∏–ª–∏ 12000 KZT!",
                    "–ë–æ–Ω—É—Å: –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω–æ–µ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç –ú—É–¥–∞—Ä–∞–±–∞"
                ]
            },
            "no_delivery_week": {
                "name": "–ù–µ–¥–µ–ª—è –±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã",
                "description": "–ì–æ—Ç–æ–≤—å—Ç–µ –¥–æ–º–∞ –∏–ª–∏ –±–µ—Ä–∏—Ç–µ –ª–∞–Ω—á–±–æ–∫—Å –Ω–∞ —Ä–∞–±–æ—Ç—É",
                "duration_days": 7,
                "expected_savings": 20000,
                "difficulty": "medium",
                "tips": [
                    "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é –∑–∞—Ä–∞–Ω–µ–µ",
                    "–ì–æ—Ç–æ–≤—å—Ç–µ –±–æ–ª—å—à–∏–º–∏ –ø–æ—Ä—Ü–∏—è–º–∏ –∏ –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–π—Ç–µ",
                    "–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Ö–æ—Ä–æ—à–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã",
                    "–°–æ—Ü—Å–µ—Ç–∏: —Å–ª–µ–¥–∏—Ç–µ –∑–∞ #mealprep –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è"
                ]
            },
            "taxi_to_walk": {
                "name": "–ü–µ—à–∫–æ–º –≤–º–µ—Å—Ç–æ —Ç–∞–∫—Å–∏",
                "description": "–ú–∞—Ä—à—Ä—É—Ç—ã –¥–æ 2 –∫–º - –ø–µ—à–∫–æ–º –∏–ª–∏ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ",
                "duration_days": 14,
                "expected_savings": 12000,
                "difficulty": "easy",
                "health_benefits": [
                    "10 000 —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å —Å–Ω–∏–∂–∞—é—Ç —Å—Ç—Ä–µ—Å—Å –Ω–∞ 47%",
                    "–≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: –≤ –ø—Ä–æ–±–∫–∞—Ö –ø–µ—à–∫–æ–º –±—ã—Å—Ç—Ä–µ–µ",
                    "–ó–¥–æ—Ä–æ–≤—å–µ + —ç–∫–æ–Ω–æ–º–∏—è = –¥–≤–æ–π–Ω–∞—è –ø–æ–ª—å–∑–∞"
                ]
            },
            "subscription_audit": {
                "name": "–†–µ–≤–∏–∑–∏—è –ø–æ–¥–ø–∏—Å–æ–∫",
                "description": "–û—Ç–º–µ–Ω–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏",
                "duration_days": 1,
                "expected_savings": 8000,  # –≤ –º–µ—Å—è—Ü
                "difficulty": "easy",
                "checklist": [
                    "Netflix, Spotify, YouTube Premium - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∏?",
                    "–û–Ω–ª–∞–π–Ω-–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã: –º–æ–∂–Ω–æ –ª–∏ –¥–µ–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å —Å–µ–º—å–µ–π?",
                    "–§–∏—Ç–Ω–µ—Å-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ?",
                    "–û–±–ª–∞—á–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤"
                ]
            }
        }
    
    def suggest_goal(self, client_context: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ü–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        
        income = client_context.get("monthly_salary_in_kzt", 0)
        debt = client_context.get("loan_payment_out_avg", 0)
        top_category = client_context.get("top_spending_category_1", "")
        
        # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
        if debt > income * 0.3:  # –î–æ–ª–≥ –±–æ–ª—å—à–µ 30% –¥–æ—Ö–æ–¥–∞
            return self._build_goal_plan("debt_free", client_context)
        
        elif "–ö–∞—Ñ–µ" in top_category or "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã" in top_category:
            return self._build_goal_plan("expense_reduction", client_context)
        
        elif income > 500000 and debt == 0:
            return self._build_goal_plan("investment", client_context)
        
        else:
            return self._build_goal_plan("savings", client_context)
    
    def _build_goal_plan(self, goal_type: str, client_context: Dict) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏"""
        
        template = self.goals_templates.get(goal_type)
        if not template:
            return {}
        
        income = client_context.get("monthly_salary_in_kzt", 0)
        
        plan = {
            "goal_type": goal_type,
            "name": template["name"],
            "icon": template["icon"],
            "personalized_target": self._calculate_target(goal_type, income),
            "timeline_months": self._estimate_timeline(goal_type, income),
            "action_steps": template.get("tips", []),
            "progress_tracking": self._create_progress_tracker(goal_type)
        }
        
        return plan
    
    def _calculate_target(self, goal_type: str, income: float) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Ü–µ–ª—å"""
        
        if goal_type == "savings":
            # –¶–µ–ª—å: 3 –º–µ—Å—è—á–Ω—ã—Ö –¥–æ—Ö–æ–¥–∞ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–æ–Ω–¥)
            return {
                "amount": income * 3,
                "description": "–†–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–æ–Ω–¥ –Ω–∞ 3 –º–µ—Å—è—Ü–∞"
            }
        
        elif goal_type == "expense_reduction":
            # –°–Ω–∏–∂–µ–Ω–∏–µ —Ç—Ä–∞—Ç –Ω–∞ 15%
            return {
                "percentage": 15,
                "description": "–°–Ω–∏–∂–µ–Ω–∏–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞—Ç –Ω–∞ 15%"
            }
        
        elif goal_type == "investment":
            # –ù–∞—á–∞—Ç—å —Å 10% –æ—Ç –¥–æ—Ö–æ–¥–∞
            return {
                "monthly_amount": income * 0.1,
                "description": "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ 10% –æ—Ç –¥–æ—Ö–æ–¥–∞"
            }
        
        return {}
    
    def _estimate_timeline(self, goal_type: str, income: float) -> int:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å—Ä–æ–∫–∏"""
        
        if goal_type == "savings":
            return 6  # 6 –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–æ–Ω–¥
        elif goal_type == "debt_free":
            return 12  # –≥–æ–¥ –Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –¥–æ–ª–≥–∞
        elif goal_type == "expense_reduction":
            return 2  # 2 –º–µ—Å—è—Ü–∞ –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
        elif goal_type == "halal_transition":
            return 3  # 3 –º–µ—Å—è—Ü–∞ –Ω–∞ –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
        else:
            return 1  # –Ω–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É
    
    def _create_progress_tracker(self, goal_type: str) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        
        return {
            "frequency": "weekly",  # –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —á–µ–∫-–∏–Ω—ã
            "metrics": self._get_metrics_for_goal(goal_type),
            "celebration_milestones": [25, 50, 75, 100],  # % –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            "motivation": [
                "–í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! üéâ",
                "–ü–æ–ª–æ–≤–∏–Ω–∞ –ø—É—Ç–∏ –ø–æ–∑–∞–¥–∏! üí™",
                "–ü–æ—á—Ç–∏ —É —Ü–µ–ª–∏ - –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å! üöÄ",
                "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! üèÜ"
            ]
        }
    
    def _get_metrics_for_goal(self, goal_type: str) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        
        metrics_map = {
            "savings": ["–°—É–º–º–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π", "% –æ—Ç —Ü–µ–ª–µ–≤–æ–π —Å—É–º–º—ã"],
            "debt_free": ["–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞", "% –ø–æ–≥–∞—à–µ–Ω–∏—è"],
            "expense_reduction": ["–¢—Ä–∞—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "% —Å–Ω–∏–∂–µ–Ω–∏—è"],
            "investment": ["–°—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π", "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"],
            "halal_transition": ["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤", "% —Ö–∞–ª—è–ª—å–Ω–æ—Å—Ç–∏"]
        }
        
        return metrics_map.get(goal_type, ["–ü—Ä–æ–≥—Ä–µ—Å—Å"])
    
    def suggest_habit_challenge(self, spending_category: str) -> Dict[str, Any]:
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —á–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç"""
        
        category_to_challenge = {
            "–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã": "coffee_challenge",
            "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è/–•–æ–±–±–∏": "no_delivery_week",
            "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç/–¢–∞–∫—Å–∏": "taxi_to_walk",
            "–°–≤—è–∑—å/–ò–Ω—Ç–µ—Ä–Ω–µ—Ç": "subscription_audit"
        }
        
        challenge_key = category_to_challenge.get(spending_category, "coffee_challenge")
        challenge = self.habit_challenges[challenge_key]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
        challenge["start_date"] = datetime.now().strftime("%d.%m.%Y")
        challenge["end_date"] = (datetime.now() + timedelta(days=challenge["duration_days"])).strftime("%d.%m.%Y")
        
        return challenge
    
    def format_goal_for_chat(self, goal_plan: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω —Ü–µ–ª–∏ –¥–ª—è —á–∞—Ç–∞"""
        
        output = f"{goal_plan['icon']} {goal_plan['name']}\n\n"
        
        if "amount" in goal_plan.get("personalized_target", {}):
            target = goal_plan["personalized_target"]
            output += f"–¶–µ–ª—å: {target['amount']:,.0f} KZT ({target['description']})\n"
        
        output += f"–°—Ä–æ–∫: {goal_plan['timeline_months']} –º–µ—Å—è—Ü–µ–≤\n\n"
        output += "–®–∞–≥–∏ –∫ —É—Å–ø–µ—Ö—É:\n"
        
        for i, step in enumerate(goal_plan.get("action_steps", []), 1):
            output += f"{i}. {step}\n"
        
        return output
    
    def format_challenge_for_chat(self, challenge: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–µ–ª–ª–µ–Ω–¥–∂ –¥–ª—è —á–∞—Ç–∞"""
        
        output = f"üéØ {challenge['name']}\n\n"
        output += f"{challenge['description']}\n\n"
        output += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {challenge['duration_days']} –¥–Ω–µ–π\n"
        output += f"–û–∂–∏–¥–∞–µ–º–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {challenge['expected_savings']:,.0f} KZT\n"
        output += f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {challenge['difficulty']}\n\n"
        
        output += "–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:\n"
        for i, tip in enumerate(challenge.get("tips", []), 1):
            output += f"{i}. {tip}\n"
        
        if "health_benefits" in challenge:
            output += "\n–ë–æ–Ω—É—Å –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è:\n"
            for benefit in challenge["health_benefits"]:
                output += f"üíö {benefit}\n"
        
        return output


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    manager = GoalsHabitsManager()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
    test_client = {
        "monthly_salary_in_kzt": 488634,
        "loan_payment_out_avg": 117151,
        "top_spending_category_1": "–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã (102,000+)"
    }
    
    # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ü–µ–ª—å
    goal = manager.suggest_goal(test_client)
    print("=== –ü–†–ï–î–õ–û–ñ–ï–ù–ù–ê–Ø –¶–ï–õ–¨ ===")
    print(manager.format_goal_for_chat(goal))
    
    # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂
    challenge = manager.suggest_habit_challenge("–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã")
    print("\n=== –ü–†–ï–î–õ–û–ñ–ï–ù–ù–´–ô –ß–ï–õ–õ–ï–ù–î–ñ ===")
    print(manager.format_challenge_for_chat(challenge))