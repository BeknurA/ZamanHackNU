'use client';

import React, { useState, useCallback, useMemo } from 'react';

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–≠–ö–ï–ù–î–ê ---
// !!! –í–ù–ò–ú–ê–ù–ò–ï: –ï—Å–ª–∏ –≤—ã —Ä–∞–∑–º–µ—Å—Ç–∏–ª–∏ FastAPI –Ω–∞ Render, –∑–∞–º–µ–Ω–∏—Ç–µ URL !!!
const API_BASE_URL = 'http://localhost:8000';
const SESSION_ID = 'demo_user_123'; // –•–∞—Ä–¥–∫–æ–¥–∏–º ID –¥–ª—è –¥–µ–º–æ
// -----------------------------

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface Message {
  role: 'user' | 'assistant' | 'system';
  content: string;
}

interface AnalysisData {
  summary: string;
  categories: { [key: string]: number };
}

// –ü—Ä–æ—Å—Ç–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ß–∞—Ç-–ø—É–∑—ã—Ä—è
const ChatBubble: React.FC<Message> = ({ role, content }) => {
  const isUser = role === 'user';
  return (
    <div className={`flex w-full ${isUser ? 'justify-end' : 'justify-start'}`}>
      <div
        className={`max-w-xl p-3 my-1 rounded-lg shadow-md ${
          isUser
            ? 'bg-blue-500 text-white rounded-br-none'
            : 'bg-gray-100 text-gray-800 rounded-tl-none'
        }`}
      >
        {content}
      </div>
    </div>
  );
};

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const HomePage: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [analysis, setAnalysis] = useState<AnalysisData | null>(null);
  const [loading, setLoading] = useState(false);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
  const addMessage = useCallback((message: Message) => {
    setMessages(prev => [...prev, message]);
  }, []);

  // 1. –§–£–ù–ö–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê (–°–≤—è–∑—å —Å /api/analyze)
  const handleAnalyze = async () => {
    if (loading) return;
    setLoading(true);
    addMessage({ role: 'user', content: '–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –∞–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≤—ã–ø–∏—Å–∫–∏...' });

    try {
      const response = await fetch(`${API_BASE_URL}/api/analyze`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ session_id: SESSION_ID }),
      });
      
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ API –∞–Ω–∞–ª–∏–∑–∞');

      const data: AnalysisData = await response.json();
      setAnalysis(data);
      
      const categoryList = Object.entries(data.categories)
        .map(([key, value]) => `${key}: ${Math.round(value)} KZT`)
        .join(', ');

      addMessage({ 
        role: 'assistant', 
        content: `–Ø —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à—É –≤—ã–ø–∏—Å–∫—É. ${data.summary}. –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç: ${categoryList}. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –¥–∞–ª—å—à–µ?`
      });

    } catch (error) {
      console.error(error);
      addMessage({ role: 'assistant', content: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±—ç–∫–µ–Ω–¥.' });
    } finally {
      setLoading(false);
    }
  };

  // 2. –§–£–ù–ö–¶–ò–Ø –ß–ê–¢–ê (–°–≤—è–∑—å —Å /api/chat)
  const handleChat = async () => {
    if (!input.trim() || loading) return;

    const userMessage = input.trim();
    setInput('');
    addMessage({ role: 'user', content: userMessage });
    setLoading(true);

    try {
      const response = await fetch(`${API_BASE_URL}/api/chat`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          session_id: SESSION_ID, 
          message: userMessage 
        }),
      });

      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ API —á–∞—Ç–∞');

      const data = await response.json();
      addMessage({ role: 'assistant', content: data.content });

    } catch (error) {
      console.error(error);
      addMessage({ role: 'assistant', content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI.' });
    } finally {
      setLoading(false);
    }
  };

  // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞)
  const CategoryChart = useMemo(() => {
    if (!analysis) return null;
    const total = Object.values(analysis.categories).reduce((sum, val) => sum + val, 0);

    return (
      <div className="mt-4 p-4 bg-white rounded-lg shadow">
        <h3 className="text-lg font-semibold mb-2">–û–±–∑–æ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ (–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è)</h3>
        <div className="space-y-1">
          {Object.entries(analysis.categories).map(([category, amount]) => (
            <div key={category} className="flex justify-between text-sm">
              <span className="font-medium">{category}</span>
              <span className="text-gray-600">{((amount / total) * 100).toFixed(1)}% ({Math.round(amount)} KZT)</span>
            </div>
          ))}
        </div>
      </div>
    );
  }, [analysis]);


  return (
    <div className="flex h-screen bg-gray-50">
      {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å: –¶–µ–ª–∏ (–í–∏–∑–∏–æ–Ω–µ—Ä—Å—Ç–≤–æ) */}
      <div className="w-1/4 p-6 bg-white shadow-xl flex flex-col">
        <h2 className="text-xl font-bold mb-6 text-green-700">Zaman AI Assistant</h2>
        
        <div className="flex-grow">
            <h3 className="text-lg font-semibold mb-3">–ú–æ–∏ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¶–µ–ª–∏</h3>
            <div className="border border-green-200 p-4 rounded-lg bg-green-50">
                <p className="font-medium">–ü–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É</p>
                <div className="w-full bg-gray-200 rounded-full h-2.5 mt-1">
                    <div className="bg-green-600 h-2.5 rounded-full" style={{ width: '35%' }}></div>
                </div>
                <p className="text-sm text-gray-500 mt-1">–ü—Ä–æ–≥—Ä–µ—Å—Å: 35%</p>
            </div>

            <h3 className="text-lg font-semibold mt-6 mb-3">–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª</h3>
            <button 
                onClick={handleAnalyze} 
                disabled={loading || analysis !== null}
                className="w-full bg-yellow-500 text-white py-2 rounded-lg hover:bg-yellow-600 disabled:bg-gray-400 transition"
            >
                {analysis ? '‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω' : (loading ? '–ê–Ω–∞–ª–∏–∑...' : '1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–ø–∏—Å–∫—É (–ê–Ω–∞–ª–∏–∑)')}
            </button>
            <button 
                onClick={() => addMessage({role: 'user', content: '–Ø –æ—á–µ–Ω—å —É—Å—Ç–∞–ª –∏ —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω, —á—Ç–æ –Ω–µ –º–æ–≥—É —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å. –î–∞–π —Å–æ–≤–µ—Ç –ø–æ –±–æ—Ä—å–±–µ —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º.'})}
                disabled={loading}
                className="w-full bg-green-500 text-white py-2 rounded-lg hover:bg-green-600 disabled:bg-gray-400 transition mt-2"
            >
                2. –ö–Ω–æ–ø–∫–∞ "–Ø –≤ —Å—Ç—Ä–µ—Å—Å–µ"
            </button>
            <button 
                onClick={() => alert('–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ (Whisper API), –Ω–æ –¥–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç.')}
                className="w-full bg-gray-500 text-white py-2 rounded-lg hover:bg-gray-600 transition mt-2"
            >
                [üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º]
            </button>
        </div>
      </div>

      {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å: –ß–∞—Ç –∏ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ */}
      <div className="w-3/4 flex flex-col">
        {/* –ê–Ω–∞–ª–∏—Ç–∏–∫–∞/–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è */}
        {analysis && (
            <div className="p-6 border-b border-gray-200">
                {CategoryChart}
            </div>
        )}

        {/* –ß–∞—Ç */}
        <div className="flex-grow overflow-y-auto p-6 space-y-4 bg-gray-50">
          {messages.length === 0 && (
            <ChatBubble role="assistant" content="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Zaman Bank. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–ø–∏—Å–∫—É', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤." />
          )}
          {messages.map((msg, index) => (
            <ChatBubble key={index} role={msg.role} content={msg.content} />
          ))}
          {loading && <ChatBubble role="assistant" content="–ü–µ—á–∞—Ç–∞—é..." />}
        </div>

        {/* –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ */}
        <div className="p-6 border-t border-gray-200 bg-white">
          <div className="flex space-x-3">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && handleChat()}
              placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, —Ü–µ–ª—è—Ö –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö..."
              disabled={loading}
              className="flex-grow p-3 border border-gray-300 rounded-lg focus:ring-green-500 focus:border-green-500"
            />
            <button
              onClick={handleChat}
              disabled={loading || !input.trim()}
              className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 disabled:bg-gray-400 transition"
            >
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default HomePage;