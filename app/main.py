import uvicorn
import webbrowser
import httpx
import chromadb
import json
import os
from fastapi import FastAPI, HTTPException, Request, UploadFile, File, Form
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import Dict, Any, List, Optional
from dotenv import load_dotenv
import threading
import random
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
API_KEY = os.getenv("API_KEY")
BASE_URL = "https://openai-hub.neuraldeep.tech"
LLM_MODEL = "gpt-4o-mini"
EMBEDDING_MODEL = "text-embedding-3-small"
WHISPER_MODEL = "whisper-1"

logger.info(f"API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'‚úì' if API_KEY else '‚úó'}")
logger.info(f"BASE_URL: {BASE_URL}")
logger.info(f"LLM_MODEL: {LLM_MODEL}")

# --- FastAPI ---
app = FastAPI(title="Zaman Bank AI Assistant API", version="1.0.0")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–¢–ê–¢–ò–ö–ò ---
try:
    current_dir = os.path.dirname(os.path.abspath(__file__))
    static_dir = os.path.abspath(os.path.join(current_dir, "static"))
    if not os.path.exists(static_dir):
        static_dir = os.path.abspath(os.path.join(current_dir, "..", "static"))
        if not os.path.exists(static_dir):
            raise FileNotFoundError("–ü–∞–ø–∫–∞ static –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    app.mount("/static", StaticFiles(directory=static_dir), name="static")
    INDEX_HTML_PATH = os.path.join(static_dir, "index.html")
    CHAT_HTML_PATH = os.path.join(static_dir, "chat.html")
    logger.info(f"‚úÖ –°—Ç–∞—Ç–∏–∫–∞: {static_dir}")
except Exception as e:
    logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏–∫–∏: {e}")
    INDEX_HTML_PATH = None
    CHAT_HTML_PATH = None

USER_STATE_CACHE: Dict[str, Dict[str, Any]] = {}
http_client = httpx.AsyncClient(timeout=120.0)

# --- ChromaDB ---
try:
    db_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "../zaman_db")
    db_client = chromadb.PersistentClient(path=db_path)
    collection = db_client.get_collection(name="zaman_products")
    logger.info(f"‚úÖ ChromaDB: {db_path}")
except Exception as e:
    logger.error(f"‚ö†Ô∏è ChromaDB –æ—à–∏–±–∫–∞: {e}")
    collection = None


# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def get_data_path(filename: str) -> str:
    current_dir = os.path.dirname(os.path.abspath(__file__))
    data_dir = os.path.abspath(os.path.join(current_dir, "..", "data"))
    if not os.path.exists(data_dir):
        data_dir = current_dir
    return os.path.join(data_dir, filename)


def load_json_safe(filepath: str, default: Any = None) -> Any:
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filepath}: {e}")
        return default


def load_personalized_client_context() -> str:
    filepath = get_data_path("zaman_personalized_rag_data.json")
    data = load_json_safe(filepath, [])
    if not data:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

    try:
        client_profile = next(item for item in data if item.get("id") == 0)
        details = client_profile.get("client_details", {})
        summary = client_profile.get("financial_summary_kzt", {})

        context_str = (
            f"–ö–ª–∏–µ–Ω—Ç: {details.get('name', 'N/A')}, –í–æ–∑—Ä–∞—Å—Ç: {details.get('age', 'N/A')}, –ì–æ—Ä–æ–¥: {details.get('city', 'N/A')}. "
            f"–°—Ç–∞—Ç—É—Å: {details.get('status', 'N/A')}. –¢–µ–∫—É—â–∏–π –ø—Ä–æ–¥—É–∫—Ç: {details.get('current_product', 'N/A')}. "
            f"–°—Ä–µ–¥. –±–∞–ª–∞–Ω—Å: {details.get('avg_monthly_balance_kzt', 'N/A')} KZT. "
            f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥: {summary.get('monthly_salary_in_kzt', 'N/A')} KZT. "
            f"–ü–ª–∞—Ç–µ–∂–∏ –ø–æ –∑–∞–π–º–∞–º: {summary.get('loan_payment_out_avg', 'N/A')} KZT/–º–µ—Å. "
            f"–ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂: {', '.join(summary.get('key_sales_opportunities', ['N/A']))}."
        )
        return context_str
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."


def load_benchmark_data() -> str:
    filepath = get_data_path("zaman_benchmark_data.json")
    benchmarks = load_json_safe(filepath, [])
    if not benchmarks:
        return "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

    formatted = []
    try:
        for item in benchmarks:
            top_spends = ", ".join([f"{k} ({v:.0f} KZT)" for k, v in item.get("top_spending_categories", {}).items()])
            goals = ", ".join(item.get("common_goals", []))
            formatted.append(
                f"–°–ï–ì–ú–ï–ù–¢: {item['segment_name']} | "
                f"–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥: {item['avg_monthly_income_kzt']:.0f} KZT. "
                f"–¢–æ–ø-—Ç—Ä–∞—Ç—ã: {top_spends}. "
                f"–¢–∏–ø–∏—á–Ω—ã–µ –¶–µ–ª–∏: {goals}. "
                f"–ò–ù–°–ê–ô–¢ –î–õ–Ø –ú–û–¢–ò–í–ê–¶–ò–ò: {item['motivational_insight']}"
            )
        return "\n\n---\n\n".join(formatted)
    except KeyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤: {e}")
        return "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."


def detect_emotional_state(message: str) -> str:
    stress_keywords = ["—Å—Ç—Ä–µ—Å—Å", "–ø–µ—Ä–µ–∂–∏–≤–∞—é", "–≤–æ–ª–Ω—É—é—Å—å", "—Ç—Ä–µ–≤–æ–∂–Ω–æ", "—É—Å—Ç–∞–ª", "–ø—Ä–æ–±–ª–µ–º", "—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω", "–Ω–µ –º–æ–≥—É"]
    if any(word in message.lower() for word in stress_keywords):
        return "stressed"
    return "neutral"


def get_wellness_advice() -> str:
    tips = [
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É: 4 —Å–µ–∫—É–Ω–¥—ã –≤–¥–æ—Ö, 4 –∑–∞–¥–µ—Ä–∂–∫–∞, 6 –≤—ã–¥–æ—Ö. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ 5 —Ä–∞–∑.",
        "–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ 5 –º–∏–Ω—É—Ç –∏ –ø–æ—Å–ª—É—à–∞–π—Ç–µ —Å–ø–æ–∫–æ–π–Ω—É—é –º—É–∑—ã–∫—É –±–µ–∑ —Å–ª–æ–≤.",
        "–ü—Ä–æ–≥—É–ª—è–π—Ç–µ—Å—å 10 –º–∏–Ω—É—Ç –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å.",
        "–ó–∞–ø–∏—à–∏—Ç–µ 3 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å —Ö–æ—Ä–æ—à–æ –ø–æ–ª—É—á–∏–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è, –¥–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–µ.",
        "–í—ã–ø–µ–π—Ç–µ —Å—Ç–∞–∫–∞–Ω —á–∏—Å—Ç–æ–π –≤–æ–¥—ã –º–µ–¥–ª–µ–Ω–Ω—ã–º–∏ –≥–ª–æ—Ç–∫–∞–º–∏.",
    ]
    return random.choice(tips)


STATIC_CLIENT_PROFILE = load_personalized_client_context()
BENCHMARK_DATA = load_benchmark_data()

logger.info(f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {'‚úì' if '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' not in STATIC_CLIENT_PROFILE else '‚úó'}")
logger.info(f"üìà –ë–µ–Ω—á–º–∞—Ä–∫–∏: {'‚úì' if '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' not in BENCHMARK_DATA else '‚úó'}")


# ==================== PYDANTIC MODELS ====================

class ChatRequest(BaseModel):
    session_id: str
    message: str


class ChatResponse(BaseModel):
    role: str
    content: str


class AnalyzeRequest(BaseModel):
    session_id: str


class AnalyzeResponse(BaseModel):
    summary: str
    categories: Dict[str, float]


class SuggestGoalResponse(BaseModel):
    formatted_message: str


# ==================== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ü–†–û–ö–°–ò ====================

async def proxy_request(
        method: str,
        path: str,
        body: Optional[Dict] = None,
        files: Optional[Dict] = None
) -> Dict:
    url = f"{BASE_URL}{path}"
    headers = {"Authorization": f"Bearer {API_KEY}"}

    try:
        if method == "GET":
            response = await http_client.get(url, headers=headers)
        elif method == "POST":
            if files:
                processed_files = {}
                for key, value in files.items():
                    if isinstance(value, tuple) and len(value) == 3:
                        processed_files[key] = value
                    elif hasattr(value, 'read'):
                        filename = getattr(value, 'name', 'unknown_file')
                        content_type = getattr(value, 'content_type', 'application/octet-stream')
                        processed_files[key] = (filename, value, content_type)
                    else:
                        raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–ª—è {key}")

                response = await http_client.post(url, headers=headers, files=processed_files, data=body, timeout=120.0)
            else:
                response = await http_client.post(url, headers=headers, json=body)
        elif method == "DELETE":
            response = await http_client.delete(url, headers=headers)
        else:
            raise HTTPException(status_code=405, detail="Method not allowed")

        response.raise_for_status()
        return response.json()
    except httpx.HTTPStatusError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ {method} {path}: {e.response.status_code} - {e.response.text}")
        raise HTTPException(status_code=e.response.status_code, detail=e.response.text)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ {method} {path}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# ==================== ZAMAN BANK ENDPOINTS ====================

async def get_embedding(text: str) -> List[float]:
    if not API_KEY:
        logger.warning("API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞")
        return []
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –¥–ª–∏–Ω–æ–π: {len(text)}")
        response = await http_client.post(
            f"{BASE_URL}/v1/embeddings",
            headers={"Authorization": f"Bearer {API_KEY}"},
            json={"input": [text], "model": EMBEDDING_MODEL}
        )
        response.raise_for_status()
        embedding = response.json()['data'][0]['embedding']
        logger.info(f"–≠–º–±–µ–¥–¥–∏–Ω–≥ –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {len(embedding)}")
        return embedding
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
        return []


def query_vector_db(embedding: List[float]) -> str:
    if not collection:
        logger.warning("ChromaDB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    if not embedding:
        logger.warning("–ü—É—Å—Ç–æ–π —ç–º–±–µ–¥–¥–∏–Ω–≥")
        return "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

    try:
        logger.info("–ó–∞–ø—Ä–æ—Å –∫ ChromaDB...")
        results = collection.query(query_embeddings=[embedding], n_results=3)
        if results and results.get('documents') and results['documents'][0]:
            docs = "\n---\n".join(results['documents'][0])
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(results['documents'][0])}")
            return docs
        else:
            logger.warning("–í ChromaDB –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return "–í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ChromaDB: {e}")
        return "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."


async def get_llm_response(session_id: str, user_message: str) -> str:
    logger.info(f"üîµ LLM –∑–∞–ø—Ä–æ—Å –æ—Ç session: {session_id}, message: '{user_message[:50]}...'")

    if not API_KEY:
        logger.error("API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return "–û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."

    user_context = USER_STATE_CACHE.get(session_id, {}).get(
        "summary",
        "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω."
    )

    logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_context[:100]}...")

    emotional_state = detect_emotional_state(user_message)
    wellness_tip = ""
    if emotional_state == "stressed":
        wellness_tip = f"\n\nüåø **–°–æ–≤–µ—Ç –¥–ª—è –¥—É—à–µ–≤–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è:**\n{get_wellness_advice()}"

    query_embedding = await get_embedding(f"{user_message}. –ö–æ–Ω—Ç–µ–∫—Å—Ç: {user_context}")
    retrieved_docs = query_vector_db(query_embedding)

    logger.info(f"Retrieved docs length: {len(retrieved_docs)}")

    MASTER_PROMPT = f"""
–¢—ã ‚Äî Zaman, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏—Å–ª–∞–º—Å–∫–æ–≥–æ –±–∞–Ω–∫–∞.

–¢–≤–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏ –®–∞—Ä–∏–∞—Ç–∞, –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞—è –ø—Ä–æ–¥—É–∫—Ç—ã –±–∞–Ω–∫–∞ –∏ –º–æ—Ç–∏–≤–∏—Ä—É—è –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è. –ë—É–¥—å —ç–º–ø–∞—Ç–∏—á–Ω—ã–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ –∏—Å–ø–æ–ª—å–∑—É–π Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, **–∂–∏—Ä–Ω—ã–π**, *–∫—É—Ä—Å–∏–≤*, —Å–ø–∏—Å–∫–∏).

**–ö–û–ù–¢–ï–ö–°–¢ –ö–õ–ò–ï–ù–¢–ê (–ê–π–≥–µ—Ä–∏–º):**
{user_context}

---
**–°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê (–ë–ï–ù–ß–ú–ê–†–ö–ò –ü–û–•–û–ñ–ò–• –ö–õ–ò–ï–ù–¢–û–í):**
{BENCHMARK_DATA}
---

**–°–ü–†–ê–í–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô –ë–ê–ù–ö–ê:**
{retrieved_docs}
---

**–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê:** {emotional_state}

**–¢–í–û–Ø –ó–ê–î–ê–ß–ê:**
1.  **–û—Ç–≤–µ—Ç—å** –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (`{user_message}`).
2.  **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π** –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –ö–û–ù–¢–ï–ö–°–¢ –ö–õ–ò–ï–ù–¢–ê.
3.  **–°—Ä–∞–≤–Ω–∏** —Ç—Ä–∞—Ç—ã –∏–ª–∏ —Ü–µ–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ë–ï–ù–ß–ú–ê–†–ö–ê–ú–ò, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ, —á—Ç–æ–±—ã **–º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å** –µ–≥–æ. –ò—Å–ø–æ–ª—å–∑—É–π –ì–û–¢–û–í–´–ô –í–´–í–û–î –î–õ–Ø –ú–û–¢–ò–í–ê–¶–ò–ò –∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞.
4.  **–ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏** –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô, –æ–±—ä—è—Å–Ω–∏ –µ–≥–æ **–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞** –∏ –∏—Å–ª–∞–º—Å–∫–∏–π **–ø—Ä–∏–Ω—Ü–∏–ø** (–ú—É–¥–∞—Ä–∞–±–∞, –ú—É—Ä–∞–±–∞—Ö–∞, –í–∞–∫–∞–ª–∞).
5.  –ï—Å–ª–∏ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï = stressed, –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–π —Å–æ–≤–µ—Ç –ø–æ wellness (–æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏).
6.  –ò—Å–ø–æ–ª—å–∑—É–π **Markdown** –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.
7.  –û—Ç–≤–µ—á–∞–π –Ω–∞ **—Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ**.
"""

    try:
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM API...")
        response = await http_client.post(
            f"{BASE_URL}/v1/chat/completions",
            headers={"Authorization": f"Bearer {API_KEY}"},
            json={
                "model": LLM_MODEL,
                "messages": [
                    {"role": "system", "content": MASTER_PROMPT},
                    {"role": "user", "content": user_message}
                ],
                "temperature": 0.7,
                "max_tokens": 700
            },
            timeout=60.0
        )
        response.raise_for_status()
        ai_response = response.json()['choices'][0]['message']['content']
        logger.info(f"‚úÖ LLM –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: {len(ai_response)}")
        return ai_response + (wellness_tip if emotional_state == "stressed" else "")
    except httpx.HTTPStatusError as e:
        logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ LLM: {e.response.status_code} - {e.response.text}")
        error_detail = e.response.json().get("error", {}).get("message", e.response.text)
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI-–º–æ–¥–µ–ª–∏: {error_detail}"
    except httpx.TimeoutException as e:
        logger.error(f"‚ùå Timeout LLM: {e}")
        return "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ LLM: {e}", exc_info=True)
        return "–Ø —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å."


def analyze_mock_transactions() -> AnalyzeResponse:
    filepath = get_data_path("mock_transactions.json")
    transactions = load_json_safe(filepath, [])
    if not transactions:
        return AnalyzeResponse(summary="–û—à–∏–±–∫–∞: —Ñ–∞–π–ª mock_transactions.json –Ω–µ –Ω–∞–π–¥–µ–Ω.", categories={})

    categories: Dict[str, float] = {}
    total_income = 0
    total_expense = 0

    for tx in transactions:
        amount = tx.get("amount", 0)
        category = tx.get("category", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        if not isinstance(amount, (int, float)): continue

        if amount > 0:
            total_income += amount
        else:
            categories[category] = categories.get(category, 0) + abs(amount)
            total_expense += abs(amount)

    sorted_categories = dict(sorted(categories.items(), key=lambda x: x[1], reverse=True))

    dynamic_summary = (
            f"–ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª {total_income:.0f} KZT –¥–æ—Ö–æ–¥–∞ –∏ –ø–æ—Ç—Ä–∞—Ç–∏–ª {total_expense:.0f} KZT. "
            f"–û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥: " + ", ".join(
        [f"{k} ({v:.0f} KZT)" for k, v in list(sorted_categories.items())[:3]])
    )

    full_context = f"–°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨: {STATIC_CLIENT_PROFILE}\n\n–î–ò–ù–ê–ú–ò–ö–ê: {dynamic_summary}"

    return AnalyzeResponse(summary=full_context, categories=sorted_categories)


# ==================== –§–†–û–ù–¢–ï–ù–î –†–û–£–¢–´ ====================

@app.get("/", include_in_schema=False)
def serve_main_frontend():
    if not INDEX_HTML_PATH or not os.path.exists(INDEX_HTML_PATH):
        raise HTTPException(status_code=404, detail="index.html –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return FileResponse(INDEX_HTML_PATH, media_type="text/html")


@app.get("/chat", include_in_schema=False)
def serve_chat_frontend():
    if not CHAT_HTML_PATH or not os.path.exists(CHAT_HTML_PATH):
        raise HTTPException(status_code=404, detail="chat.html –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return FileResponse(CHAT_HTML_PATH, media_type="text/html")


# ==================== API ENDPOINTS ====================

@app.post("/api/analyze", response_model=AnalyzeResponse)
async def analyze_transactions_endpoint(request: AnalyzeRequest):
    logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ –¥–ª—è session: {request.session_id}")
    response = analyze_mock_transactions()
    if request.session_id not in USER_STATE_CACHE:
        USER_STATE_CACHE[request.session_id] = {}
    USER_STATE_CACHE[request.session_id]["summary"] = response.summary
    logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è session: {request.session_id}")
    return response


@app.post("/api/chat", response_model=ChatResponse)
async def chat_with_assistant(request: ChatRequest):
    logger.info(f"üí¨ /api/chat –≤—ã–∑–≤–∞–Ω: session={request.session_id}, message='{request.message[:50]}...'")

    if not collection:
        logger.error("‚ùå ChromaDB –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        raise HTTPException(status_code=500, detail="–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

    try:
        ai_response = await get_llm_response(request.session_id, request.message)
        logger.info(f"‚úÖ /api/chat –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {len(ai_response)} —Å–∏–º–≤–æ–ª–æ–≤")
        return ChatResponse(role="assistant", content=ai_response)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /api/chat: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/voice")
async def voice_chat_endpoint(session_id: str = Form(...), file: UploadFile = File(...)):
    logger.info(f"üé§ /api/voice –≤—ã–∑–≤–∞–Ω: session={session_id}, file={file.filename}")

    if not API_KEY:
        raise HTTPException(status_code=500, detail="API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    if not file or not file.filename:
        raise HTTPException(status_code=400, detail="–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")

    try:
        audio_bytes = await file.read()
        logger.info(f"–ê—É–¥–∏–æ –ø—Ä–æ—á–∏—Ç–∞–Ω: {len(audio_bytes)} –±–∞–π—Ç")

        files_for_proxy = {"file": (file.filename, audio_bytes, file.content_type)}
        data_for_proxy = {"model": WHISPER_MODEL}

        transcription_result = await proxy_request(
            "POST",
            "/v1/audio/transcriptions",
            body=data_for_proxy,
            files=files_for_proxy
        )

        transcribed_text = transcription_result.get("text", "").strip()
        logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: '{transcribed_text}'")

        if not transcribed_text:
            return JSONResponse(
                status_code=400,
                content={"detail": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."}
            )

        ai_response_text = await get_llm_response(session_id, transcribed_text)

        return JSONResponse(content={
            "transcribed_text": transcribed_text,
            "ai_response_text": ai_response_text
        })

    except HTTPException as e:
        raise e
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ /api/voice: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞.")


@app.post("/api/suggest-goal", response_model=SuggestGoalResponse)
async def suggest_financial_goal(request: AnalyzeRequest):
    logger.info(f"üéØ /api/suggest-goal –¥–ª—è session: {request.session_id}")

    session_id = request.session_id
    user_context = USER_STATE_CACHE.get(session_id, {}).get(
        "summary",
        "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω."
    )
    if "–Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω" in user_context:
        raise HTTPException(status_code=400, detail="–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–ø–∏—Å–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

    goal_prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞:
{user_context}

–ù–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ç—Ä–∞—Ç, –¥–æ—Ö–æ–¥–∞ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂, –ø—Ä–µ–¥–ª–æ–∂–∏ –û–î–ù–£ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ü–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å, —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–æ–Ω–¥, —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ª–≥). –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –≤–∫–ª—é—á–∞—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ –∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ä–æ–∫ –µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.

–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: "–ê–π–≥–µ—Ä–∏–º, —É—á–∏—Ç—ã–≤–∞—è –≤–∞—à–∏ —Ç—Ä–∞—Ç—ã –Ω–∞ –∫–∞—Ñ–µ (~35,500 KZT/–º–µ—Å), –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ü–µ–ª—å: '–ù–∞–∫–æ–ø–∏—Ç—å 500,000 KZT –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–æ–Ω–¥ –∑–∞ 10-12 –º–µ—Å—è—Ü–µ–≤'. –≠—Ç–æ –¥–∞—Å—Ç –≤–∞–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º –¥–Ω–µ. –ú—ã –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å —Å –ø–µ—Ä–µ–≤–æ–¥–∞ —á–∞—Å—Ç–∏ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –Ω–∞—à –≤–∫–ª–∞–¥ –ú—É–¥–∞—Ä–∞–±–∞."
"""
    try:
        response = await http_client.post(
            f"{BASE_URL}/v1/chat/completions",
            headers={"Authorization": f"Bearer {API_KEY}"},
            json={
                "model": LLM_MODEL,
                "messages": [{"role": "user", "content": goal_prompt}],
                "temperature": 0.8,
                "max_tokens": 150
            }
        )
        response.raise_for_status()
        goal_suggestion = response.json()['choices'][0]['message']['content']
        logger.info(f"‚úÖ –¶–µ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        return SuggestGoalResponse(formatted_message=goal_suggestion)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–µ–ª–∏: {e}")
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ü–µ–ª—å.")


# ==================== –ó–ê–ü–£–°–ö ====================

if __name__ == "__main__":
    SERVER_URL = "http://localhost:8000"


    def start_server():
        try:
            uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True, log_level="info")
        except RuntimeError as e:
            if "Cannot run uvicorn.run()" in str(e):
                logger.error("‚ö†Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–µ: uvicorn main:app --reload --host 0.0.0.0 --port 8000")
            else:
                raise e


    logger.info(f"‚úÖ Zaman AI –∑–∞–ø—É—â–µ–Ω: {SERVER_URL}")
    logger.info(f"üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {SERVER_URL}/docs")

    threading.Timer(2.0, lambda: webbrowser.open(SERVER_URL)).start()
    start_server()