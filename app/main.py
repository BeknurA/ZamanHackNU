import uvicorn
import webbrowser
import httpx
import chromadb
import json
import os
from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import Dict, Any, List
from dotenv import load_dotenv
import threading
from datetime import datetime
from goals_habits import GoalsHabitsManager

load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ü–µ–ª–µ–π
goals_manager = GoalsHabitsManager()

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
API_KEY = os.getenv("API_KEY")
BASE_URL = "https://openai-hub.neuraldeep.tech"
LLM_MODEL = "gpt-4o-mini"
EMBEDDING_MODEL = "text-embedding-3-small"

# --- FastAPI ---
app = FastAPI(title="Zaman Bank AI Assistant Backend")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.mount("/static", StaticFiles(directory="static"), name="static")
INDEX_HTML_PATH = "./static/index.html"
CHAT_HTML_PATH = "./static/chat.html"

USER_STATE_CACHE: Dict[str, Dict[str, Any]] = {}
http_client = httpx.AsyncClient(timeout=60.0)

# --- ChromaDB ---
try:
    db_client = chromadb.PersistentClient(path="./zaman_db")
    collection = db_client.get_collection(name="zaman_products")
    print("‚úÖ ChromaDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ ChromaDB: {e}")
    collection = None


# --- –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ---
def load_json_safe(filepath: str, default: Any = None) -> Any:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ JSON —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
        return default
    except json.JSONDecodeError as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ JSON –≤ {filepath}: {e}")
        return default


def load_personalized_client_context() -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞"""
    data = load_json_safe("data/zaman_personalized_rag_data.json", [])
    if not data:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    try:
        client_profile = next(item for item in data if item.get("id") == 0)
        details = client_profile.get("client_details", {})
        summary = client_profile.get("financial_summary_kzt", {})
        
        return (
            f"–ö–ª–∏–µ–Ω—Ç: {details.get('name')}, {details.get('age')} –ª–µ—Ç, {details.get('city')}. "
            f"–°—Ç–∞—Ç—É—Å: {details.get('status')}. "
            f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–¥—É–∫—Ç: {details.get('current_product')}. "
            f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: {details.get('avg_monthly_balance_kzt')} KZT. "
            f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥: {summary.get('monthly_salary_in_kzt')} KZT. "
            f"–ü–ª–∞—Ç–µ–∂–∏ –ø–æ –∑–∞–π–º–∞–º: {summary.get('loan_payment_out_avg')} KZT/–º–µ—Å."
        )
    except (StopIteration, KeyError, TypeError):
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."


def load_benchmark_data() -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–µ–Ω—á–º–∞—Ä–∫–∏"""
    benchmarks = load_json_safe("data/zaman_benchmark_data.json", [])
    if not benchmarks:
        return "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    formatted = []
    for item in benchmarks:
        top_spends = ", ".join([f"{k} ({v:.0f} KZT)" for k, v in item.get("top_spending_categories", {}).items()])
        goals = ", ".join(item.get("common_goals", []))
        
        formatted.append(
            f"–°–ï–ì–ú–ï–ù–¢: {item['segment_name']} | "
            f"–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥: {item['avg_monthly_income_kzt']:.0f} KZT. "
            f"–¢–æ–ø-—Ç—Ä–∞—Ç—ã: {top_spends}. "
            f"–¶–µ–ª–∏: {goals}. "
            f"–ò–ù–°–ê–ô–¢: {item['motivational_insight']}"
        )
    
    return "\n\n---\n\n".join(formatted)


# --- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –±–æ—Ç–∞ ---
def detect_emotional_state(message: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    stress_keywords = ["—Å—Ç—Ä–µ—Å—Å", "–ø–µ—Ä–µ–∂–∏–≤–∞—é", "–≤–æ–ª–Ω—É—é—Å—å", "—Ç—Ä–µ–≤–æ–∂–Ω–æ", "–Ω–µ—Ä–≤–Ω–∏—á–∞—é", "—É—Å—Ç–∞–ª", "–ø—Ä–æ–±–ª–µ–º"]
    positive_keywords = ["—Å–ø–∞—Å–∏–±–æ", "–æ—Ç–ª–∏—á–Ω–æ", "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ", "—Ä–∞–¥", "–±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω"]
    
    msg_lower = message.lower()
    
    if any(word in msg_lower for word in stress_keywords):
        return "stressed"
    if any(word in msg_lower for word in positive_keywords):
        return "positive"
    
    return "neutral"


def get_wellness_advice() -> str:
    """–°–æ–≤–µ—Ç—ã –ø–æ –±–æ—Ä—å–±–µ —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º –±–µ–∑ —Ç—Ä–∞—Ç"""
    tips = [
        "üíö –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –º–µ–¥–∏—Ç–∞—Ü–∏—é: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 'Insight Timer' –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ç—ã—Å—è—á–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Å—Å–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
        "üö∂ –ü—Ä–æ–≥—É–ª–∫–∞ –≤ –ø–∞—Ä–∫–µ ‚Äî –¥–æ–∫–∞–∑–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–Ω–∏–∑–∏—Ç—å –∫–æ—Ä—Ç–∏–∑–æ–ª (–≥–æ—Ä–º–æ–Ω —Å—Ç—Ä–µ—Å—Å–∞) –Ω–∞ 25%.",
        "üìù –í–µ–¥–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Å–Ω–∏–∑–∏—Ç—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å –Ω–∞ 30% (–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ Cambridge University).",
        "‚òï –í—Å—Ç—Ä–µ—Ç—å—Ç–µ—Å—å —Å –¥—Ä—É–≥–æ–º –∑–∞ —á–∞—à–∫–æ–π —á–∞—è –¥–æ–º–∞ ‚Äî —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∞–∂–Ω–µ–µ, —á–µ–º –¥–æ—Ä–æ–≥–∏–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è.",
        "üßò –ü—Ä–∞–∫—Ç–∏–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏: –∫–∞–∂–¥—ã–π –≤–µ—á–µ—Ä –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ 3 –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã —Å–µ–≥–æ–¥–Ω—è.",
    ]
    import random
    return random.choice(tips)


STATIC_CLIENT_PROFILE = load_personalized_client_context()
BENCHMARK_DATA = load_benchmark_data()

print("üë§ –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω." if "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" not in STATIC_CLIENT_PROFILE else "‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –ù–ï –∑–∞–≥—Ä—É–∂–µ–Ω.")
print("üìà –ë–µ–Ω—á–º–∞—Ä–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã." if "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" not in BENCHMARK_DATA else "‚ö†Ô∏è –ë–µ–Ω—á–º–∞—Ä–∫–∏ –ù–ï –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")


# --- Pydantic Models ---
class AnalyzeRequest(BaseModel):
    session_id: str


class ChatRequest(BaseModel):
    session_id: str
    message: str


class ChatResponse(BaseModel):
    role: str
    content: str


class AnalyzeResponse(BaseModel):
    summary: str
    categories: Dict[str, float]


# --- –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ---
def analyze_mock_transactions() -> AnalyzeResponse:
    transactions = load_json_safe("data/mock_transactions.json", [])
    if not transactions:
        return AnalyzeResponse(
            summary="–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            categories={}
        )
    
    categories: Dict[str, float] = {}
    total_income = 0
    total_expense = 0
    
    for tx in transactions:
        amount = tx["amount"]
        category = tx["category"]
        if amount > 0:
            total_income += amount
        else:
            categories[category] = categories.get(category, 0) + abs(amount)
            total_expense += abs(amount)
    
    sorted_categories = dict(sorted(categories.items(), key=lambda x: x[1], reverse=True))
    
    dynamic_summary = (
        f"–ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª {total_income:.0f} KZT –¥–æ—Ö–æ–¥–∞ –∏ –ø–æ—Ç—Ä–∞—Ç–∏–ª {total_expense:.0f} KZT. "
        f"–û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∞—Ç—ã: " + ", ".join([f"{k} ({v:.0f} KZT)" for k, v in list(sorted_categories.items())[:3]])
    )
    
    full_context = (
        f"–°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨: {STATIC_CLIENT_PROFILE}\n\n"
        f"–î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó: {dynamic_summary}"
    )
    
    return AnalyzeResponse(summary=full_context, categories=sorted_categories)


# --- RAG ---
async def get_embedding(text: str) -> List[float]:
    try:
        response = await http_client.post(
            f"{BASE_URL}/v1/embeddings",
            headers={"Authorization": f"Bearer {API_KEY}"},
            json={"input": [text], "model": EMBEDDING_MODEL}
        )
        response.raise_for_status()
        return response.json()['data'][0]['embedding']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
        return []


def query_vector_db(embedding: List[float]) -> str:
    if not collection or not embedding:
        return "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    results = collection.query(query_embeddings=[embedding], n_results=3)
    return "\n---\n".join(results['documents'][0])


# --- LLM Response ---
async def get_llm_response(session_id: str, user_message: str) -> str:
    user_context = USER_STATE_CACHE.get(session_id, {}).get(
        "summary", 
        "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–ø–∏—Å–∫—É."
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    emotional_state = detect_emotional_state(user_message)
    
    # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤ —Å—Ç—Ä–µ—Å—Å–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç –ø–æ wellness
    wellness_tip = ""
    if emotional_state == "stressed":
        wellness_tip = f"\n\n**üåø –°–æ–≤–µ—Ç –ø–æ –∑–∞–±–æ—Ç–µ –æ —Å–µ–±–µ:**\n{get_wellness_advice()}"
    
    # RAG
    query_embedding = await get_embedding(f"{user_message}. –ö–æ–Ω—Ç–µ–∫—Å—Ç: {user_context}")
    retrieved_docs = query_vector_db(query_embedding)
    
    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_time = datetime.now().strftime("%H:%M, %d.%m.%Y")
    
    MASTER_PROMPT = f"""
–¢—ã ‚Äî Zaman, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏—Å–ª–∞–º—Å–∫–æ–≥–æ –±–∞–Ω–∫–∞. –¢–≤–æ—è –º–∏—Å—Å–∏—è ‚Äî –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –¥—Ä—É–≥–æ–º –∫–ª–∏–µ–Ω—Ç–∞.

**–ü–†–ò–ù–¶–ò–ü–´ –û–ë–©–ï–ù–ò–Ø:**
1. **–≠–º–ø–∞—Ç–∏—è –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ** ‚Äî –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∏ –µ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ—Ç–æ–º –≥–æ–≤–æ—Ä–∏ –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö.
2. **–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π Bold –∏–ª–∏ Italic** ‚Äî –æ–±—â–∞–π—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫.
3. **–ë—É–¥—å –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–º** ‚Äî –Ω–µ –∂–¥–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö.
4. **–ì–æ–≤–æ—Ä–∏ –Ω–∞ —è–∑—ã–∫–µ –∫–ª–∏–µ–Ω—Ç–∞** ‚Äî –∏–∑–±–µ–≥–∞–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –∂–∞—Ä–≥–æ–Ω–∞, –æ–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.

**–¢–ï–ö–£–©–ò–ô –ö–û–ù–¢–ï–ö–°–¢ –ö–õ–ò–ï–ù–¢–ê:**
{user_context}

**–°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê (–¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏):**
{BENCHMARK_DATA}

**–ë–ê–ó–ê –ó–ù–ê–ù–ò–ô –û –ü–†–û–î–£–ö–¢–ê–•:**
{retrieved_docs}

**–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê:** {emotional_state}

**–¢–ï–ö–£–©–ï–ï –í–†–ï–ú–Ø:** {current_time}

**–ó–ê–î–ê–ß–ê:**
–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞, —É—á–∏—Ç—ã–≤–∞—è:
- –ï–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
- –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É (–º–æ—Ç–∏–≤–∏—Ä—É–π, —Å—Ä–∞–≤–Ω–∏–≤–∞—è —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏)
- –ü—Ä–æ–¥—É–∫—Ç—ã –±–∞–Ω–∫–∞ (–ø—Ä–µ–¥–ª–∞–≥–∞–π, –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ)
- –ü—Ä–∏–Ω—Ü–∏–ø—ã –∏—Å–ª–∞–º—Å–∫–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç–æ)

–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤ —Å—Ç—Ä–µ—Å—Å–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–ø–æ—Å–æ–± —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ç—Ä–∞—Ç.
"""
    
    try:
        response = await http_client.post(
            f"{BASE_URL}/v1/chat/completions",
            headers={"Authorization": f"Bearer {API_KEY}"},
            json={
                "model": LLM_MODEL,
                "messages": [
                    {"role": "system", "content": MASTER_PROMPT},
                    {"role": "user", "content": user_message}
                ],
                "temperature": 0.8,  # –ü–æ–≤—ã—à–µ–Ω–∞ –¥–ª—è –±–æ–ª–µ–µ "—á–µ–ª–æ–≤–µ—á–Ω—ã—Ö" –æ—Ç–≤–µ—Ç–æ–≤
                "max_tokens": 600
            }
        )
        response.raise_for_status()
        ai_response = response.json()['choices'][0]['message']['content']
        
        # –î–æ–±–∞–≤–ª—è–µ–º wellness —Å–æ–≤–µ—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        return ai_response + wellness_tip
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ LLM: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."


# --- ENDPOINTS ---

@app.get("/", include_in_schema=False)
def serve_main_frontend():
    if not os.path.exists(INDEX_HTML_PATH):
        raise HTTPException(status_code=404, detail="index.html –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return FileResponse(INDEX_HTML_PATH, media_type="text/html")


@app.get("/chat", include_in_schema=False)
def serve_chat_frontend():
    if not os.path.exists(CHAT_HTML_PATH):
        raise HTTPException(status_code=404, detail="chat.html –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return FileResponse(CHAT_HTML_PATH, media_type="text/html")


@app.post("/api/analyze", response_model=AnalyzeResponse)
async def analyze_transactions_endpoint(request: AnalyzeRequest):
    print(f"–ê–Ω–∞–ª–∏–∑ –¥–ª—è {request.session_id}")
    response = analyze_mock_transactions()
    
    if request.session_id not in USER_STATE_CACHE:
        USER_STATE_CACHE[request.session_id] = {}
    USER_STATE_CACHE[request.session_id]["summary"] = response.summary
    
    return response


@app.post("/api/chat", response_model=ChatResponse)
async def chat_with_assistant(request: ChatRequest):
    print(f"[{request.session_id}] {request.message}")
    
    if not collection:
        raise HTTPException(status_code=500, detail="–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    ai_response = await get_llm_response(request.session_id, request.message)
    
    return ChatResponse(role="assistant", content=ai_response)


# --- –ó–ê–ü–£–°–ö ---
if __name__ == "__main__":
    SERVER_URL = "http://localhost:8000"
    
    def start_server():
        uvicorn.run(app, host="0.0.0.0", port=8000)
    
    print(f"‚úÖ Zaman AI –∑–∞–ø—É—â–µ–Ω: {SERVER_URL}")
    print("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
    
    threading.Timer(1.5, lambda: webbrowser.open(SERVER_URL)).start()
    start_server()