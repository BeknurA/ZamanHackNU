import uvicorn
import webbrowser
import httpx
import chromadb
import json
import os
from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import Dict, Any
from dotenv import load_dotenv
import threading

load_dotenv()

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–≠–ö–ï–ù–î–ê –ò API ---
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ–∞–π–ª .env —Å –∫–ª—é—á–æ–º API_KEY
API_KEY = os.getenv("API_KEY")
BASE_URL = "https://openai-hub.neuraldeep.tech"
LLM_MODEL = "gpt-4o-mini"
EMBEDDING_MODEL = "text-embedding-3-small"
# -----------------------------------

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI ---
app = FastAPI(title="Zaman Bank AI Assistant Backend")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–¢–ê–¢–ò–ö–ò –ò –®–ê–ë–õ–û–ù–û–í ---
# 1. –ú–æ–Ω—Ç–∏—Ä—É–µ–º StaticFiles –Ω–∞ /static/
# –í—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ static –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –ø—É—Ç–∏ /static/...
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ü–£–¢–ò –ö HTML-—Ñ–∞–π–ª–∞–º (–û–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ static)
INDEX_HTML_PATH = "./static/index.html"
CHAT_HTML_PATH = "./static/chat.html"
# ---------------------------------------

USER_STATE_CACHE: Dict[str, Dict[str, Any]] = {}
http_client = httpx.AsyncClient(timeout=60.0)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaDB (RAG) ---
try:
    db_client = chromadb.PersistentClient(path="./zaman_db")
    collection = db_client.get_collection(name="zaman_products")
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ChromaDB.")
except Exception as e:
    print(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ChromaDB. –ó–∞–ø—É—Å—Ç–∏—Ç–µ rag_prep.py. –û—à–∏–±–∫–∞: {e}")
    collection = None


# --- –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ö–û–ù–¢–ï–ö–°–¢–ê –ö–õ–ò–ï–ù–¢–ê ---
def load_personalized_client_context() -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ (–ê–π–≥–µ—Ä–∏–º) –∏–∑ RAG JSON-—Ñ–∞–π–ª–∞."""
    try:
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –ª–µ–∂–∏—Ç –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        with open("zaman_personalized_rag_data.json", "r", encoding="utf-8") as f:
            data = json.load(f)
            client_profile = next(item for item in data if item.get("id") == 0)

            details = client_profile.get("client_details", {})
            summary = client_profile.get("financial_summary_kzt", {})

            context_str = (
                f"–ö–ª–∏–µ–Ω—Ç: {details.get('name', 'N/A')}, –í–æ–∑—Ä–∞—Å—Ç: {details.get('age', 'N/A')}, –ì–æ—Ä–æ–¥: {details.get('city', 'N/A')}. "
                f"–¢–µ–∫—É—â–∏–π –Ω–µ–∏—Å–ª–∞–º—Å–∫–∏–π –ø—Ä–æ–¥—É–∫—Ç: {details.get('current_product', 'N/A')}. "
                f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥: {summary.get('monthly_salary_in_kzt', 'N/A')} KZT. "
                f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –∑–∞–π–º–∞–º: {summary.get('loan_payment_out_avg', 'N/A')} KZT. "
                f"–ì–ª–∞–≤–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –ø—Ä–æ–¥–∞–∂ (Upsell): {', '.join(summary.get('key_sales_opportunities', []))}."
            )
            return context_str
    except (FileNotFoundError, IndexError):
        return "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        return "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."


STATIC_CLIENT_PROFILE = load_personalized_client_context()
print("üë§ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.")


# --- –ó–ê–ì–†–£–ó–ö–ê –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–û–ô –ê–ù–ê–õ–ò–¢–ò–ö–ò (–ë–ï–ù–ß–ú–ê–†–ö–ò) ---
def load_benchmark_data() -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–±–µ–Ω—á–º–∞—Ä–∫–æ–≤) –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    try:
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –ª–µ–∂–∏—Ç –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        with open("zaman_benchmark_data.json", "r", encoding="utf-8") as f:
            benchmarks = json.load(f)
            formatted_benchmarks = []
            for item in benchmarks:
                top_spends = ", ".join([f"{k} ({v:.0f} KZT)" for k, v in item["top_spending_categories"].items()])
                goals = ", ".join(item["common_goals"])

                formatted_benchmarks.append(
                    f"–°–ï–ì–ú–ï–ù–¢: {item['segment_name']} | –°—Ä–µ–¥–Ω–∏–π –î–æ—Ö–æ–¥: {item['avg_monthly_income_kzt']:.0f} KZT. "
                    f"–¢–æ–ø-—Ç—Ä–∞—Ç—ã: {top_spends}. "
                    f"–¢–∏–ø–∏—á–Ω—ã–µ –¶–µ–ª–∏: {goals}. "
                    f"–ì–û–¢–û–í–´–ô –í–´–í–û–î –î–õ–Ø –ú–û–¢–ò–í–ê–¶–ò–ò: {item['motivational_insight']}"
                )

            return "\n\n---\n\n".join(formatted_benchmarks)

    except FileNotFoundError:
        print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: zaman_benchmark_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤: {e}")
        return "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."


BENCHMARK_DATA = load_benchmark_data()
print("üìà –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–±–µ–Ω—á–º–∞—Ä–∫–∏) –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")


# --------------------------------------------------------

# --- –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö (Pydantic) ---
class AnalyzeRequest(BaseModel):
    session_id: str


class ChatRequest(BaseModel):
    session_id: str
    message: str


class ChatResponse(BaseModel):
    role: str
    content: str


class AnalyzeResponse(BaseModel):
    summary: str
    categories: Dict[str, float]


# --- –õ–æ–≥–∏–∫–∞ –ê–Ω–∞–ª–∏–∑–∞ (–ú–æ–∫) ---
def analyze_mock_transactions() -> AnalyzeResponse:
    """–ò–º–∏—Ç–∞—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
    try:
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –ª–µ–∂–∏—Ç –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        with open("mock_transactions.json", "r", encoding="utf-8") as f:
            transactions = json.load(f)
    except FileNotFoundError:
        return AnalyzeResponse(summary="–û—à–∏–±–∫–∞: mock_transactions.json –Ω–µ –Ω–∞–π–¥–µ–Ω.", categories={})

    categories: Dict[str, float] = {}
    total_income = 0
    total_expense = 0

    for tx in transactions:
        amount = tx["amount"]
        category = tx["category"]
        if amount > 0:
            total_income += amount
        else:
            if category not in categories:
                categories[category] = 0
            categories[category] += abs(amount)
            total_expense += abs(amount)

    sorted_categories = dict(sorted(categories.items(), key=lambda item: item[1], reverse=True))

    # –§–æ—Ä–º–∏—Ä—É–µ–º –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô —Å–∞–º–º–∞—Ä–∏
    dynamic_summary = (
            f"–ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª {total_income} KZT –¥–æ—Ö–æ–¥–∞ –∏ –ø–æ—Ç—Ä–∞—Ç–∏–ª {total_expense} KZT. "
            f"–û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥: " + ", ".join(
        [f"{k} ({v:.0f} KZT)" for k, v in sorted_categories.items()])
    )

    # –û–ë–™–ï–î–ò–ù–Ø–ï–ú –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –ò –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –ö–û–ù–¢–ï–ö–°–¢
    full_context = (
        f"–°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨ (–ò–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø—Ä–æ–¥–∞–∂): {STATIC_CLIENT_PROFILE}\n\n"
        f"–î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ò–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô: {dynamic_summary}"
    )

    return AnalyzeResponse(summary=full_context, categories=sorted_categories)


# --- –õ–æ–≥–∏–∫–∞ RAG (–Ø–¥—Ä–æ) ---
async def get_embedding(text: str) -> list[float]:
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
    try:
        response = await http_client.post(
            f"{BASE_URL}/v1/embeddings",
            headers={"Authorization": f"Bearer {API_KEY}"},
            json={"input": [text], "model": EMBEDDING_MODEL}
        )
        response.raise_for_status()
        return response.json()['data'][0]['embedding']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ API —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
        return []


def query_vector_db(embedding: list[float]) -> str:
    """–ò—â–µ—Ç –≤ ChromaDB —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã."""
    if not collection or not embedding:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –±–∞–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

    results = collection.query(
        query_embeddings=[embedding],
        n_results=3
    )
    return "\n---\n".join(results['documents'][0])


async def get_llm_response(session_id: str, user_message: str) -> str:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è LLM. –°–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏—â–µ—Ç RAG –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç.
    """
    # 1. –ü–æ–ª—É—á–∞–µ–º –ü–û–õ–ù–´–ô —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Å—Ç–∞—Ç–∏–∫–∞ + –¥–∏–Ω–∞–º–∏–∫–∞)
    user_context = USER_STATE_CACHE.get(session_id, {}).get("summary",
                                                            "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –µ—â–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–∂–∞—Ç—å '–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–ø–∏—Å–∫—É'.")

    # 2. RAG: –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã/—Å–æ–≤–µ—Ç—ã
    query_embedding = await get_embedding(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: {user_message}. –ï–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç: {user_context}")
    retrieved_docs = query_vector_db(query_embedding)

    # 3. –°–æ–±–∏—Ä–∞–µ–º "–ú–∞—Å—Ç–µ—Ä-–ø—Ä–æ–º–ø—Ç"
    MASTER_PROMPT = f"""
    –¢—ã - Zaman, "—É–º–Ω—ã–π, —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π" AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏—Å–ª–∞–º—Å–∫–æ–≥–æ –±–∞–Ω–∫–∞.
    –¢–≤–æ—è –º–∏—Å—Å–∏—è - –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å, –∞ –ø–æ–º–æ–≥–∞—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –û–°–û–ó–ù–ê–ù–ù–´–ï —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è, —Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞—è –ø—Ä–∏–Ω—Ü–∏–ø—ã —ç—Ç–∏–∫–∏ –∏ –®–∞—Ä–∏–∞—Ç–∞.
    –¢—ã –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –¥–æ–≤–µ—Ä–∏–µ. –ë—É–¥—å —ç–º–ø–∞—Ç–∏—á–Ω—ã–º, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º. –¢—ã –ü–†–û–ê–ö–¢–ò–í–ù–´–ô –ø—Ä–æ–¥–∞–≤–µ—Ü —É—Å–ª—É–≥.

    –¢–ï–ö–£–©–ò–ô, –ü–û–õ–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢ –ö–õ–ò–ï–ù–¢–ê (–í–∫–ª—é—á–∞—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ç):
    {user_context}

    --- –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê (–ë–ï–ù–ß–ú–ê–†–ö–ò) ---
    –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç, —á—Ç–æ–±—ã –¥–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Ü–µ–ª—è–º.
    {BENCHMARK_DATA}
    --- –ö–û–ù–ï–¶ –ë–ï–ù–ß–ú–ê–†–ö–û–í ---

    –°–ü–†–ê–í–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô ZAMAN BANK (–ü—Ä–æ–¥—É–∫—Ç—ã –∏ –ò—Å–ª–∞–º—Å–∫–æ–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ):
    {retrieved_docs}

    –ó–ê–î–ê–ß–ê:
    –û—Ç–≤–µ—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞.
    1. –í—Å–µ–≥–¥–∞ —É—á–∏—Ç—ã–≤–∞–π –µ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.
    2. –ï—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ, –ò–°–ü–û–õ–¨–ó–£–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π, —á—Ç–æ–±—ã –ü–†–û–ê–ö–¢–ò–í–ù–û –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã Zaman Bank.
    3. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Å–≤–æ–∏—Ö —Ç—Ä–∞—Ç–∞—Ö –∏–ª–∏ —Ü–µ–ª—è—Ö, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Ä–∞–≤–Ω–∏ –µ–≥–æ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º —Å–µ–≥–º–µ–Ω—Ç–æ–º –∏–∑ –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–û–ô –ê–ù–ê–õ–ò–¢–ò–ö–ò (–±–µ–Ω—á–º–∞—Ä–∫–æ–≤), —á—Ç–æ–±—ã –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏ –¥–∞—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è–º.
    4. –û–±—ä—è—Å–Ω—è–π –ø—Ä–∏–Ω—Ü–∏–ø—ã –ò—Å–ª–∞–º—Å–∫–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.
    5. –ì–æ–≤–æ—Ä–∏ –Ω–∞ —è–∑—ã–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ (—Ä—É—Å—Å–∫–∏–π).
    """

    try:
        response = await http_client.post(
            f"{BASE_URL}/v1/chat/completions",
            headers={"Authorization": f"Bearer {API_KEY}"},
            json={
                "model": LLM_MODEL,
                "messages": [
                    {"role": "system", "content": MASTER_PROMPT},
                    {"role": "user", "content": user_message}
                ],
                "temperature": 0.7,
                "max_tokens": 500
            }
        )
        response.raise_for_status()
        return response.json()['choices'][0]['message']['content']

    except httpx.HTTPStatusError as e:
        print(f"–û—à–∏–±–∫–∞ API LLM: {e.response.status_code} - {e.response.text}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI-–º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ LLM: {e}")
        return "–Ø —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π—Ç–µ."


# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –§—Ä–æ–Ω—Ç–µ–Ω–¥–∞ ---

@app.get("/", include_in_schema=False)
def serve_main_frontend():
    """–û—Ç–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É (static/index.html)."""
    if not os.path.exists(INDEX_HTML_PATH):
        raise HTTPException(status_code=404, detail=f"–ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {INDEX_HTML_PATH}")
    return FileResponse(INDEX_HTML_PATH, media_type="text/html")


@app.get("/chat", include_in_schema=False)
def serve_chat_frontend():
    """–û—Ç–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–∞—Ç–∞ (static/chat.html)."""
    if not os.path.exists(CHAT_HTML_PATH):
        raise HTTPException(status_code=404, detail=f"–§—Ä–æ–Ω—Ç–µ–Ω–¥ —Ñ–∞–π–ª —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {CHAT_HTML_PATH}")
    return FileResponse(CHAT_HTML_PATH, media_type="text/html")


# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API (–û—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

@app.post("/api/analyze", response_model=AnalyzeResponse)
async def analyze_transactions_endpoint(request: AnalyzeRequest):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ú–û–ö-–¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ü–û–õ–ù–´–ô –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Å—Ç–∞—Ç–∏–∫–∞+–¥–∏–Ω–∞–º–∏–∫–∞) –≤ –∫—ç—à.
    """
    print(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–µ—Å—Å–∏–∏: {request.session_id}")
    response = analyze_mock_transactions()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ü–û–õ–ù–´–ô —Å–∞–º–º–∞—Ä–∏ –¥–ª—è RAG
    if request.session_id not in USER_STATE_CACHE:
        USER_STATE_CACHE[request.session_id] = {}
    USER_STATE_CACHE[request.session_id]["summary"] = response.summary

    return response


@app.post("/api/chat", response_model=ChatResponse)
async def chat_with_assistant(request: ChatRequest):
    """
    –ì–ª–∞–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —á–∞—Ç–∞.
    """
    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {request.session_id}: {request.message}")
    if not collection:
        raise HTTPException(status_code=500, detail="–í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ rag_prep.py")

    ai_response_content = await get_llm_response(request.session_id, request.message)

    return ChatResponse(role="assistant", content=ai_response_content)


# --- –ó–∞–ø—É—Å–∫ (–° –∞–≤—Ç–æ-–æ—Ç–∫—Ä—ã—Ç–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞) ---
if __name__ == "__main__":
    SERVER_URL = "http://localhost:8000"


    def start_server():
        uvicorn.run(app, host="0.0.0.0", port=8000)


    print(f"‚úÖ –í—Å—è —Å–∏—Å—Ç–µ–º–∞ Zaman AI –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞: {SERVER_URL}")
    print(f"üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –±—Ä–∞—É–∑–µ—Ä–µ...")

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–º –ø—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –æ—Ç–¥–∞–µ—Ç index.html
    threading.Timer(1.5, lambda: webbrowser.open(SERVER_URL)).start()

    start_server()